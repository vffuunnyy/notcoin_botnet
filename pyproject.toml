[tool.poetry]
name = "notcoin-botnet"
version = "0.1.0"
description = ""
authors = ["vffuunnyy <vffuunnyy@gmail.com>"]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
aiohttp = "^3.9.1"
pyrogram = { git = "https://github.com/KurimuzonAkuma/pyrogram.git#dev" }
tgcrypto = "^1.2.5"
#pyrogram = {git = "https://github.com/vffuunnyy/pyrogram.git"}
pillow = "^10.2.0"
pydantic = "^2.5.3"
arrow = "^1.3.0"
stream-sqlite = "^0.0.41"
pythonmonkey = "^0.2.3"
aiohttp-proxy = "^0.1.2"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
ruff = ">=0.0.291"
types-aiofiles = ">=22.1"
types-toml = ">=0.10.8.7"
types-redis = ">=4.6.0.7"
python-dotenv = "^1.0.0"
#pre-commit = ">=2.19"
#types-pytz = ">=2023.3.1.1"


[tool.ruff]
target-version = "py312"
src = ["src"]
fix = true
line-length = 120
select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C40", # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # flake8-eradicate/eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "FLY", # flynt
    "FURB", # refurb
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PGH", # pygrep
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-pathlib
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff checks
    "S", #  flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle warnings
    "YTT", # flake8-2020
    "UP006", # Use `list` instead of `List` for type annotation
    "UP007", # Use `X | Y` for type annotations
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "TID252", # Import from package instead of module
    "ALL", # All not listed above
]
ignore = [
    "COM812",
    "ISC001",
    "W191",
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "DJ", # flake8-Django
    "EM", # flake8-errmsg
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "PD", # pandas-vet
    "D", # pydocstyle
    "TRY", # tryceratops
    "SLF", # flake8-self
    "B904", # use 'raise ... from err'
    "B905", # `zip()` without an explicit `strict=` parameter (python3.10+ only)
    "PLR0913", # Too many arguments to function call
    "A003", # Class attribute builtin name shadowing
    "N818", # Exception should be named with an Error suffix
    "PGH003", # Use specific rule codes when ignoring type issues
    "ARG002", # Unused method argument
    "ANN002", # typed args
    "ANN003", # typed kwargs
    "ANN101", # typed self
    "ANN102", # typed cls
    "ANN204", # typed __init__
    "RUF001", # String contains ambiguous unicode character
    "RUF002", # Docstring contains ambiguous unicode character
    "RUF003", # Comment contains ambiguous unicode character
    "PLW2901", # for loop variable overwritten by assignment target
    "PLE1205", # https://github.com/charliermarsh/ruff/issues/3351
    "B030", # Except handlers should only be exception classes or tuples of exception
    "S301", # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue,
    "ERA001", # Commented out code
    "T201", # print() used
    "FA102", # `__future__` import "annotations" missing
]
fixable = ["ALL"]
unfixable = ["ERA"] # do not autoremove commented out code

[tool.ruff.format]
preview = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["src"]
case-sensitive = true
combine-as-imports = true
lines-between-types = 1
lines-after-imports = 2

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.field_validator"]